{"version":3,"sources":["Banner.js","NavigationBar.js","Header.js","Projects.js","AISuite.js","Delimiter.js","Arnheim.js","Neural.js","CV.js","App.js","serviceWorker.js","index.js"],"names":["Banner","props","Jumbotron","className","CardTitle","Button","outline","NavigationBar","Collapse","isOpen","this","open","navbar","Nav","NavItem","to","Component","Header","toggle","bind","state","setState","Container","Navbar","color","light","expand","NavbarBrand","href","src","height","NavbarToggler","onClick","React","Projects","Row","Col","xs","sm","lg","AISuite","Card","inverse","CardImg","width","alt","CardImgOverlay","Delimiter","Neural","CV","CardBody","App","basename","Arnheim","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac12ecbc.chunk.js","sourcesContent":["import {Button, CardImg, CardTitle, Container, Jumbotron} from \"reactstrap\";\r\nimport React from \"react\";\r\n\r\n\r\nconst Banner = (props) => {\r\n        return <Jumbotron className=\"text-center jetbrains white\">\r\n            <p/>\r\n            <CardTitle>\r\n                <h3>Johannes Roos</h3>\r\n                <p><small>~</small></p>\r\n            </CardTitle>\r\n\r\n            <CardTitle >\r\n                <Button outline className=\"white\">Download CV</Button>\r\n                <br/>\r\n\r\n            </CardTitle>\r\n        </Jumbotron>;\r\n}\r\n\r\nexport default Banner","import React, {Component} from \"react\";\r\nimport {Collapse, Nav, NavItem} from \"reactstrap\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nexport class NavigationBar extends Component {\r\n    render() {\r\n        return <Collapse isOpen={this.props.open} navbar>\r\n            <Nav className=\"ml-auto ralewayed\" navbar>\r\n                <NavItem>\r\n                    <Link to=\"/\" className=\"nav-link\">Home</Link>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <Link to=\"/nodes\" className=\"nav-link\">Projects</Link>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <Link to=\"/flows\" className=\"nav-link\">CV</Link>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <Link to=\"/flowbuilder\" className=\"nav-link\">Images</Link>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <Link to=\"/flowbuilder\" className=\"nav-link\">Papers</Link>\r\n                </NavItem>\r\n            </Nav>\r\n        </Collapse>;\r\n    }\r\n}\r\n\r\nexport default NavigationBar","import {Container, Navbar, NavbarBrand, NavbarToggler} from \"reactstrap\";\r\nimport React from \"react\";\r\nimport NavigationBar from \"./NavigationBar\";\r\n\r\nclass Header extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n            isOpen: false\r\n        };\r\n    }\r\n    toggle() {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <header>\r\n                <Container>\r\n                    <Navbar color=\"faded\" light expand=\"md\" className=\"align-items-center\">\r\n                        <NavbarBrand href=\"/\" className={\"ml-1\"}><img src=\"/images/jhnnsrs.png\" height={41}/></NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle}/>\r\n                        <NavigationBar open={this.state.isOpen}/>\r\n                    </Navbar>\r\n                </Container>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header\r\n","import {Col, Container, Row} from \"reactstrap\";\r\nimport React from \"react\";\r\n\r\n\r\nconst Projects = (props) => {\r\n    return <Container>\r\n        <Row>\r\n            <Col xs=\"12\" sm=\"12\" lg={4}>\r\n                <h2> AISuite </h2>\r\n                <span className=\"justify-content-center text-justify\">\r\n           AISuite is a GUI program aiming to provide aid on identifying and processing structures from immunofluorescence files. It is powered by pyton-bioformats and is therefore able to handle data from most microscopes and uses OpenCV and Numpy to unleash Python's potential image processing capabilities. Visualization is provided by PyQT and matplotlib-bindings and data-storage is handled by HDF-Files.</span>\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"12\" lg={4}>\r\n                <h2> Arnheim </h2>\r\n                <span className=\"justify-content-center text-justify\">\r\n            This is a basic implementation of the Arnheim Framework, that seeks to implement a working pipeline for the processing and analysis of microscopic data. Arnheim uses Docker-Containers to ensure most of its workflow is as modular and scalable as possible. Its architrecture consists of\r\n            <br/>\r\n            <br/>\r\n            <ul>\r\n                <li>Bergen (the Backend, a django-driven API-Backend)</li>\r\n                <li>Oslo (the Frontend, react-based orchestrator of the modules, separate GitHub)</li>\r\n                <li>Database (either sqlite or postgres database for object persistence)</li>\r\n                <li>JupJup (the Jupyter-Server for easy Access to the Models Provided)</li>\r\n            </ul>\r\n                </span>\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"12\" lg={4}>\r\n                <h2> Neural </h2>\r\n                <span className=\"justify-content-center text-justify\">\r\n            Neural is a Docker implementation of NEURON with python bindings. It containarizes a whole Jupyter Datascience Environment together with python enabled Neuron (7.7), it also provides a layout for consistent neuronal networkbuilding devidev into </span>\r\n            </Col>\r\n\r\n        </Row>\r\n    </Container>;\r\n}\r\n\r\nexport default Projects","import {Button, Col, Container, Row} from \"reactstrap\";\r\nimport React from \"react\";\r\nimport { Card, CardTitle, CardText, CardImg, CardImgOverlay } from 'reactstrap';\r\n\r\nconst AISuite = (props) => {\r\n    return <Container>\r\n        <Row>\r\n            <Col xs=\"12\" sm=\"12\" lg={6}>\r\n                <h3> AISuite </h3>\r\n                <span className=\"justify-content-center text-justify\">\r\n           AISuite is a GUI program aiming to provide aid on identifying and processing structures from immunofluorescence files. It is powered by pyton-bioformats and is therefore able to handle data from most microscopes and uses OpenCV and Numpy to unleash Python's potential image processing capabilities. Visualization is provided by PyQT and matplotlib-bindings and data-storage is handled by HDF-Files.</span>\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"12\" lg={6}>\r\n                <Card inverse >\r\n                    <CardImg width=\"100%\" src=\"/images/multichannel-layout.jpg\" alt=\"Card image cap\" />\r\n                    <CardImgOverlay className=\"pr-4\">\r\n                        <Row>\r\n                            <Col lg={9}>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Button outline color=\"light\" className=\"white\">github</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardImgOverlay>\r\n                </Card>\r\n\r\n            </Col>\r\n\r\n        </Row>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n    </Container>;\r\n}\r\n\r\nexport default AISuite","import {Button, CardTitle, Col, Container, Jumbotron, Row} from \"reactstrap\";\r\nimport React from \"react\";\r\n\r\n\r\nconst Delimiter = (props) => {\r\n    return <Jumbotron className=\"text-center jetbrains white\">\r\n        <p/>\r\n    </Jumbotron>;\r\n}\r\n\r\nexport default Delimiter","import {Button, Col, Container, Row} from \"reactstrap\";\r\nimport React from \"react\";\r\nimport { Card, CardTitle, CardText, CardImg, CardImgOverlay } from 'reactstrap';\r\n\r\nconst AISuite = (props) => {\r\n    return <Container>\r\n        <Row>\r\n            <Col xs=\"12\" sm=\"12\" lg={6}>\r\n                <Card inverse >\r\n                    <CardImg width=\"100%\" src=\"/images/data-science.png\" alt=\"Card image cap\" />\r\n                    <CardImgOverlay className=\"pr-4\">\r\n                        <Row>\r\n                            <Col lg={9}>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Button outline color=\"light\" className=\"white\">github</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardImgOverlay>\r\n                </Card>\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"12\" lg={6}>\r\n                <h3> Arnheim </h3>\r\n                <span className=\"justify-content-center text-justify\">\r\n           This is a basic implementation of the Arnheim Framework, that seeks to implement a working pipeline for the processing and analysis of microscopic data. Arnheim uses Docker-Containers to ensure most of its workflow is as modular and scalable as possible. Its architrecture consists of\r\n                </span>\r\n                <br/>\r\n                <br/>\r\n                <ul>\r\n                    <li>Bergen (the Backend, a django-driven API-Backend)</li>\r\n                    <li>Oslo (the Frontend,react-based orchestrator of the modules)</li>\r\n                    <li>Database (either sqlite or postgres database for object persistence)</li>\r\n                    <li>JupJup (the Jupyter-Server for easy Access to the Models Provided)</li>\r\n                </ul>\r\n                </Col>\r\n\r\n            </Row>\r\n        <br/>\r\n        <br/>\r\n    </Container>;\r\n}\r\n\r\nexport default AISuite","import {Button, Col, Container, Row} from \"reactstrap\";\r\nimport React from \"react\";\r\nimport { Card, CardTitle, CardText, CardImg, CardImgOverlay } from 'reactstrap';\r\n\r\nconst Neural = (props) => {\r\n    return <Container>\r\n        <Row>\r\n\r\n            <Col xs=\"12\" sm=\"12\" lg={6}>\r\n                <h3> Neural </h3>\r\n                <span className=\"justify-content-center text-justify\">\r\n          Neural is a Docker implementation of NEURON with python bindings. It containarizes a whole Jupyter Datascience Environment together with python enabled Neuron (7.7), it also provides a layout for consistent neuronal networkbuilding devidev into    </span>\r\n                <br/>\r\n                <br/>\r\n                <ul>\r\n                    <li>Bergen (the Backend, a django-driven API-Backend)</li>\r\n                    <li>Oslo (the Frontend,react-based orchestrator of the modules)</li>\r\n                    <li>Database (either sqlite or postgres database for object persistence)</li>\r\n                    <li>JupJup (the Jupyter-Server for easy Access to the Models Provided)</li>\r\n                </ul>\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"12\" lg={6}>\r\n                <Card inverse >\r\n                    <CardImg width=\"100%\" src=\"/images/neuron.png\" alt=\"Card image cap\" />\r\n                    <CardImgOverlay className=\"pr-4\">\r\n                        <Row>\r\n                            <Col lg={9}>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Button outline color=\"light\" className=\"white\">github</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardImgOverlay>\r\n                </Card>\r\n            </Col>\r\n\r\n            </Row>\r\n        <br/>\r\n        <br/>\r\n    </Container>;\r\n}\r\n\r\nexport default Neural","import {Card, CardBody, Col, Container, Row} from \"reactstrap\";\r\nimport React from \"react\";\r\n\r\n\r\nconst CV = (props) => {\r\n    return <Container>\r\n        <Row>\r\n            <Col xs=\"12\" sm=\"12\" lg={4}>\r\n                <h2> Education </h2>\r\n                <br/>\r\n                <span className=\"justify-content-center\">\r\n                    <Card className=\"mt-2\">\r\n                        <CardBody>\r\n                    <h5>MD Student at the University of Heidelberg</h5>\r\n                    <small>Januar 2017 - today </small>\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n                    <Card className=\"mt-2\">\r\n                        <CardBody>\r\n                    <h5>Medical student at Ruprecht-Karls-University Heidelberg, Faculty Mannheim</h5>\r\n                    <small>October 2011 - today </small>\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n                    <Card className=\"mt-2\">\r\n                        <CardBody>\r\n                    <h5>Nicolaus-Kistner-Gymnasium Mosbach</h5>\r\n                    <small>2002 – July 2011</small>\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n                </span>\r\n                <br/>\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"12\" lg={4}>\r\n                <h2> Work </h2>\r\n                <br/>\r\n                <span className=\"justify-content-center\">\r\n                    <Card className=\"mt-2\">\r\n                        <CardBody>\r\n                                <h5>Physiology Tutor</h5>\r\n                                        Ruprecht-Karls-University Heidelberg, Faculty Mannheim, Department of Physiology<br/>\r\n                                <small>November 2013 - today </small>\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n                    <Card className=\"mt-2\">\r\n                        <CardBody>\r\n                                <h5>Physiology Tutor</h5>\r\n                                        Ruprecht-Karls-University Heidelberg, Faculty Mannheim, Department of Physiology<br/>\r\n                                <small>November 2013 - today </small>\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n                    <Card className=\"mt-2\">\r\n                        <CardBody>\r\n                                <h5>Research </h5>\r\n                                       Universidad Andres Bello, Santiago de Chile, Chile<br/>\r\n                                <small>January 2014 - today</small>\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n                    <Card className=\"mt-2\">\r\n                    <CardBody>\r\n                            <h5>Tutor for foreign doctors</h5>\r\n                                    Freiburg International Academy<br/>\r\n                            <small>February 2016 - today </small>\r\n\r\n                    </CardBody>\r\n                </Card>\r\n                </span>\r\n                <br/>\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"12\" lg={4}>\r\n                <h2> Publications </h2>\r\n                <br/>\r\n                <span className=\"justify-content-center\">\r\n                    <Card className=\"mt-2\">\r\n                        <CardBody>\r\n                                <h5>Heterogeneity of the axon initial segment in\r\ninterneurons and pyramidal cells of rodent visual cortex.</h5>\r\n                                        Höfflin F*, Jack A*, Riedel C, Bucher-Mack J, Roos J, Schultz C, Wahle\r\nP, Engelhardt M<br/>\r\n                                <small>Front Cell Neurosci 11: 332, 2017 </small>\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n                    <Card className=\"mt-2\">\r\n                        <CardBody>\r\n                                <h5>Fast prenatal\r\ndevelopment of the NPY neuron system in the neocortex of the\r\nEuropean wild boar, Sus scrofa. </h5>\r\n                                       Ernst L, Darschnik S, Roos J, González-Gómez M, Beemelmans C,\r\nBeemelmans C, Engelhardt M, Meyer G, Wahle P<br/>\r\n                                <small>Brain Stuct Funct 223(8): 3855-3873,\r\n2018</small>\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n                    <Card className=\"mt-2\">\r\n                    <CardBody>\r\n                            <h5>AISuite, a Python tool for morphometrical analysis</h5>\r\n                                    Roos J, Engelhardt M<br/>\r\n                            <small>SFN 2019 </small>\r\n\r\n                    </CardBody>\r\n                </Card>\r\n                </span>\r\n                <br/>\r\n            </Col>\r\n\r\n        </Row>\r\n    </Container>;\r\n}\r\n\r\nexport default CV","import React from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter, HashRouter} from 'react-router-dom'\r\nimport Banner from \"./Banner\";\r\nimport Header from \"./Header\";\r\nimport Projects from \"./Projects\";\r\nimport AISuite from \"./AISuite\";\r\nimport Delimiter from \"./Delimiter\";\r\nimport Arnheim from \"./Arnheim\";\r\nimport Neural from \"./Neural\";\r\nimport CV from \"./CV\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter  basename=\"cv\">\r\n          <Header/>\r\n      <div className=\"wrap nana\">\r\n        <Banner/>\r\n        <Projects/>\r\n\r\n        <Delimiter/>\r\n            <AISuite/>\r\n            <Arnheim/>\r\n            <Neural/>\r\n          <Delimiter/>\r\n          <CV/>\r\n      </div>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n// Styles\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}